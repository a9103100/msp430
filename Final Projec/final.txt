#include "io430.h"
#include "intrinsics.h"
#include "stdio.h"
#define CPU_CLOCK       1000000
#define delay_us(us)    __delay_cycles(CPU_CLOCK/1000000*(us))
#define delay_ms(ms)    __delay_cycles(CPU_CLOCK/1000*(ms))


#define TIMER1_A0_VECTOR (48*2u)
#define TIMER2_A0_VECTOR (44*2u)
#define PORT2_VECTOR    (42*2u) //0xFFD4 Port2
#define PORT1_VECTOR    (47*2u) //0xFFDE Port1

#define Do1 9000 //bass
#define Re1 2000 //drum
#define Mi1 500 //hi-hat
#define Fa1 1504 
#define So1 1344 
#define La1 1185 
#define Ti1 1036
#define Do2 7000


int tone1 = 992; //don
int tone2 = 1504; //tsu
int tone3 = 992; //da
int tone4 = So1; //ba
int count = 500;
int score=230,check1=0,check2=0,check3=0,check4=0;
int push1=0,push2=0;

int light = 90;
int divider = 9;
int i=0;
//int score= 190;

void star(int score)
{ 
  //set
  P1SEL |= 0x10; //pin1.4
  P1DIR |= 0x10;
  P1SEL |= 0x20; //pin1.5
  P1DIR |= 0x20;
  //P2SEL |= 0x10; //pin2.4
  //P2DIR |= 0x10;
  P2SEL |= 0x20; //pin2.5
  P2DIR |= 0x20;
  
  //TA0CTL = TASSEL_1 + MC_1 + TAIE;
  TA0CTL = TASSEL_1 + MC_1 ;
  TA0CCR0 = light;
  TA0CCTL3 = OUTMOD_7; //pin1.4
  //TA0CCR3 =light/divider;
  TA0CCTL4 = OUTMOD_7; //pin1.5
  //TA0CCR4 =light/divider;
  
  TA2CTL = TASSEL_1 + MC_1 ;
  //TA2CTL = TASSEL_1 + MC_1 + TAIE;
  TA2CCR0 = light;
  //TA2CCTL1 = OUTMOD_7; //pin2.4
  //TA2CCR1 = light/divider;
  TA2CCTL2 = OUTMOD_7; //pin2.5
  //TA2CCR2 = light/divider;  
  
  if(score >= 250){
    TA0CCR3 = light;
    TA0CCR4 = light;
    //TA2CCR1 = light;
    TA2CCR2 = light;    
  }
  else if(score>=210 && score<250)
  {
    TA0CCR3 = light/divider;
    TA0CCR4 = light;
    //TA2CCR1 = light;
    TA2CCR2 = light; 
  }
  else if(score>=170 && score<210)
  {
    TA0CCR3 = 0;
    TA0CCR4 = light;
    //TA2CCR1 = light;
    TA2CCR2 = light; 
  }
    else if(score>=140 && score<170)
  {
    TA0CCR3 = 0;
    TA0CCR4 = light/divider;
    //TA2CCR1 = light;
    TA2CCR2 = light; 
   /*P2IE&=~0x01;
  P2IFG|=0x01;
  P1IE&=~0x08;
  P1IFG|=0x08;*/
    while(1);
  }
    else if(score>=100 && score<140)
  {
    TA0CCR3 = 0;
    TA0CCR4 = 0;
    //TA2CCR1 = light;
    TA2CCR2 = light;
  }
    else if(score>=80 && score<100)
  {
    TA0CCR3 = 0;
    TA0CCR4 = 0;
    //TA2CCR1 = light/divider;
    TA2CCR2 = light; 
  }
    else
  {
    TA0CCR3 = 0;
    TA0CCR4 = 0;
    //TA2CCR1 = 0;
    TA2CCR2 = 0;
  }
  
}

void delay_300()
{
  for(i=0;i<60-7*(push1+push2);i++)
    delay_ms(5);
    push1=0;
    push2=0;
}

void delay_500()
{
  for(i=0;i<50-4*(push1+push2);i++)
    delay_ms(10);
    push1=0;
    push2=0;
}

void delay_50()
{
  for(i=0;i<5-4*(push1+push2);i++)
    delay_ms(10);
    push1=0;
    push2=0;
}

void delay_42()
{
  for(i=0;i<420-400*(push1+push2);i++)
    delay_us(100);
    push1=0;
    push2=0;
}

void ba() //led1
{
  P4OUT=0x02;  //4.1 led
  check2=1;
  delay_ms(228);
  P4OUT=0x00;
  check2=0;
}
void tsu() //led2
{
  P3OUT=0x01; //3.0 led
  check1=1;
  delay_ms(130);
  if(push1==0)
    delay_ms(90);
  else if(push1>=1)
    delay_ms(12);
  P3OUT=0x00;
  check1=0;
  push1=0;
}
void da() //led3
{
  P6OUT=0x01; //6.0 led
  check1=1;
  delay_ms(228);
  P6OUT=0x00;
  check1=0;
}
void don() //led4
{
  P7OUT=0x01; //7.0 led
  check1=1;
  delay_ms(228);
  P7OUT=0x00;
  check1=0;
}

void don_tsu()  //led4 led2
{
  P7OUT=0x01;  //don tsu
  P3OUT=0x01;
  check2=1;
  check1=1;
  delay_ms(130);
  if(push2+push1 == 1)
    delay_ms(21);
  else if(push2+push1>=2)
    delay_ms(12);
  else 
    delay_ms(90);
  P7OUT=0x00;
  check2=0;
  P3OUT=0x00;
  check1=0;
  push1=0;
  push2=0;
}

void da_tsu()  //led3 led2
{
  P6OUT=0x01;  //da tsu
  P3OUT=0x01;
  check2=1;
  check1=1;
    delay_ms(130);
  if(push2 + push1 ==1)
    delay_ms(21);
  else if(push2+push1>=2)
    delay_ms(12);
  else 
    delay_ms(90);
  P6OUT=0x00;
  check2=0;
  P3OUT=0x00;
  check1=0;  
  push1=0;
  push2=0;
}

void ba_don()  //led1 led4
{
  P4OUT=0x02;  //ba don 
  P7OUT=0x01;
  check2=1;
  check1=1;
  delay_ms(220);
  P4OUT=0x00;
  check2=0;
  P7OUT=0x00;
  check1=0;
}



void song()
{
    don(); //
    delay_ms(300);
    don();
    delay_ms(300);
    don();
    delay_ms(300);
    don();
    delay_ms(300);
    don(); //
    delay_ms(300);
    don();
    delay_ms(300);
    don();
    delay_ms(300);
    don();
    delay_ms(300);
    
    
    da();//before song
    delay_300();
    delay_ms(7810);
    don(); //line2-1
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_500();
    da();
    delay_300();
    don(); //line2-2
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_500();
    da();
    delay_300();
    don(); //line2-3
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_500();
    da();
    delay_300();
    don(); //line2-4
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_500();
    da();
    delay_300();
    
    
    don(); //line3-1
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_500();
    da();
    delay_300();
    don(); //line3-2
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_300();
    da();
    delay_300();
    don(); //line3-3
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_500();
    da();
    delay_300();
    don(); //line3-4
    delay_300();
    da();
    delay_50();
    don();
    delay_50();
    delay_500();
    da();
    delay_500();
    
    don_tsu(); //line4-1
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    don_tsu(); //line4-2
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    don_tsu(); //line4-3
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    don_tsu(); //line4-4
    delay_50();
    don();
    delay_50();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //line5-1
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    don_tsu(); //line5-2
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    don_tsu(); //line5-3
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    don_tsu(); //line5-4
    delay_50();
    don();
    delay_50();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    ba_don(); //6-1
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //6-2
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //6-3
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //6-4
    delay_42();
    don_tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    ba_don(); //7-1
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //7-2
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //7-3
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //7-4
    delay_42();
    don_tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    ba_don(); //8-1
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //8-2
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //8-3
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //8-4
    delay_42();
    don_tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    ba_don(); //9-1
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //9-2
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //9-3
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    tsu();
    delay_42();
    tsu();
    delay_42();
    da_tsu();
    delay_42();
    tsu();
    delay_42();
    
    don_tsu(); //9-4
    delay_42();
    don_tsu();
    delay_42();
    da_tsu();
    delay_42();
    don_tsu();
    delay_42();
    don_tsu();
    delay_42();
    da();
    delay_42();
    da_tsu();
    delay_300();

    ba_don(); //10-1
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //10-2
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //10-3
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //10-4
    delay_50();
    don();
    delay_50();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_50();
    tsu();
    delay_50();
    da_tsu();
    delay_300();
    
    don_tsu(); //11-1
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //11-2
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //11-3
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //11-4
    delay_50();
    don();
    delay_50();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_50();
    tsu();
    delay_50();
    da_tsu();
    delay_300();
    
    ba_don(); //12-1
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //12-2
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //12-3
    delay_300();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_300();
    da_tsu();
    delay_300();
    
    don_tsu(); //12-4
    delay_50();
    don();
    delay_50();
    da_tsu();
    delay_50();
    don();
    delay_50();
    tsu();
    delay_50();
    tsu();
    delay_50();
    da_tsu();
    delay_300();
}

int main( void ) {     
  
  // Stop watchdog timer to prevent time out reset
  WDTCTL = WDTPW + WDTHOLD;

  check1=0;
  check2=0;
  check3=0;
  check4=0;

  //0FFE8h
  //TA1CTL = TASSEL_1+MC_1+TACLR+TAIE;
  //
  TA0CTL = TASSEL_2+MC_1+TACLR;
  TA0CCTL1 = OUTMOD_3; 
  
  TA2CTL = TASSEL_2+MC_1+TACLR;
  TA2CCTL1 = OUTMOD_3; 
    
    P1IFG=0x00;
    P2IFG=0x00; 
   
    //buzzer 2.4
    P2DIR=0x10; //00000100
    P2SEL=0x10;
    P2OUT=0x10; //00000010
    P2REN=0x10;
    //button 2.0
    P2DIR|=0x00;
    P2SEL|=0x00;
    P2REN|=0x01; //00000010
    P2OUT|=0x01;
    P2IE|=0x01;
    P2IES|=0x01; 
    //button 2.3
    P2DIR|=0x00;
    P2SEL|=0x00;
    P2REN|=0x08; //00000010
    P2OUT|=0x08;
    P2IE|=0x08;
    P2IES|=0x08;
    
    //buzzer 1.2
    P1DIR=0x04; //00000100
    P1SEL=0x04;
    P1OUT=0x04; //00000010
    P1REN=0x04;
    //button 1.3
    P1DIR|=0x00;
    P1SEL|=0x00;
    P1REN|=0x08; //00000010
    P1OUT|=0x08;
    P1IE|=0x08;
    P1IES|=0x08;
        //button 1.6
    P1DIR|=0x00;
    P1SEL|=0x00;
    P1REN|=0x40; //00000010
    P1OUT|=0x40;
    P1IE|=0x40;
    P1IES|=0x40;

  P3DIR=0x01; //3.0LED
  P3SEL=0x00;
  P3OUT=0x00;
  
  P4DIR=0x02; //4.1LED
  P4SEL=0x00;
  P4OUT=0x00;
  
  P6DIR=0x01; //6.0LED
  P6SEL=0x00;
  P6OUT=0x00;
  
  P7DIR=0x01; //7.0LED
  P7SEL=0x00;
  P7OUT=0x00;
  
   TA0CCR0 = 0 ;      //reset     
   TA0CCR1 = 0;        //set  
   
   TA2CCR0 = 0 ;      //reset     
   TA2CCR1 = 0;        //set 
  
   //TA1CCR0 = 16384 ; 
  
   __bis_SR_register(GIE);

  check1=0;
  check2=0;
  check3=0;
  check4=0;
  song();
  star(score);
   while(1);
  
} 

#pragma vector=PORT2_VECTOR //push button
__interrupt void P2_ISR(void)
{
  //TA1CTL&=~TAIFG; 
    //P1IE=0x00;
    P2IE&=~0x09;
   //push2=1;
   if(check3==1||check4==1)
      score=score+1;
   if(P2IFG==0x01)  //da
   {
      TA2CCR0 = tone3;
      TA2CCR1 = tone3/2;
      delay_ms(15);
      TA2CCR0 = 0;
      TA2CCR1 = 0;   
      delay_ms(15);
      push2++;
   }
   else   if(P2IFG==0x08)//don
   {
      //TA2CCR0 = tone4;
      //TA2CCR1 = tone4/2;
      TA2CCR0 = tone1;
      TA2CCR1 = tone1/2;
      delay_ms(15);
      TA2CCR0 = 0;
      TA2CCR1 = 0;   
      delay_ms(15);
      push2++;
   }
   
      
    //P1IFG=0x00;
    //P1IE=0x32;
    P2IFG=0x00;
    P2IE|=0x09;
}
#pragma vector=PORT1_VECTOR //push button
__interrupt void P1_ISR(void)
{
  //TA1CTL&=~TAIFG;
    P1IE&=~0x48;
    //push1=1;
      if(check1==1||check2==1)
        score=score+1;
      
   if(P1IFG==0x08)  //ba
    {
      TA0CCR0 = tone4;
      TA0CCR1 = tone4/2;
      delay_ms(15);
      TA0CCR0 = 0;
      TA0CCR1 = 0;   
      delay_ms(15);
      push1++;
   }
    else if(P1IFG==0x40)//tsu
    {
      TA0CCR0 = tone2;
      TA0CCR1 = tone2/2;

      delay_ms(15);
      TA0CCR0 = 0;
      TA0CCR1 = 0;   
      delay_ms(15);
      push1++;
     
   }
      
    //P1IFG=0x00;
    //P1IE=0x32;
    P1IFG=0x00;
    P1IE|=0x48;
}
 